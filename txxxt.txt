
func AddLikePostHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		helpers.HandleErrorPages(w, http.StatusMethodNotAllowed, http.StatusText(http.StatusMethodNotAllowed))
		return
	}

	cook, cookieFound := r.Cookie("session_id")
	if cookieFound != nil {
		log.Println(cookieFound, "3231")
		OverWriteCookieValue(w, r, uuid.Nil)
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}

	fmt.Println("12278")

	if cook.Value == "" {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}

	fmt.Println("1212284")

	activeSession, errForSes := use.DataBase.SessionExists(cook.Value)

	if !activeSession || errForSes != nil {
		OverWriteCookieValue(w, r, uuid.Nil)
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}

	fmt.Println("2121293")

	author, err := use.GetAuthor(cook.Value)
	if err != nil {
		log.Println("error in getting author", err)
		return
	}

	commentID := r.FormValue("cid")
	like := r.FormValue("like")
	fmt.Printf("author: %v\n", author)

	if commentID == "" || like == "" {
		helpers.HandleErrorPages(w, http.StatusBadRequest, http.StatusText(http.StatusBadRequest))
		return
	}

	fmt.Printf("like: %v\n", like)

	pid, err := strconv.Atoi(commentID)
	if err != nil {
		helpers.HandleErrorPages(w, http.StatusBadRequest, http.StatusText(http.StatusBadRequest))
		return
	}

	likenum, err := strconv.Atoi(like)
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}

	fmt.Println("here")

	fmt.Printf("pid: %v\n", pid)

	err = use.DataBase.InsertLikeComment(author, cid, likenum)
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}

	fmt.Println("like added.")

	likes, dislikes, err := database.DataBase.LikesDislikesCommentTotal(commentID)

	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}

	fmt.Printf("likes: %v\n", likes)
	fmt.Printf("dislikes: %v\n", dislikes)

	// Create a JSON response struct
	response := jsonResponse{
		Success:  true,
		Message:  "like added successfully",
		Likes:    likes,
		Dislikes: dislikes,
	}
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		http.Error(w, "Failed to encode JSON", http.StatusInternalServerError)
		return
	}
}